services:
  web:
    build: .
    command: >
      sh -c "./entrypoint.sh"
    restart: always
    volumes:
      # DEVELOPMENT BIND MOUNT OPTIONS FOR APPS
      - ./information_technologies:/usr/src/app/information_technologies
      - ./lab1:/usr/src/app/lab1
      - ./non_rel_db:/usr/src/app/non_rel_db

      - static_volume:/usr/src/app/static
      - media_volume:/usr/src/app/media
      - ./ssl:/usr/src/app/ssl
    expose:
      - 8000
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started

  db:
    image: postgres:15-alpine3.19
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file: .env
    ports:
      - 5433:5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
      interval: 1s
      timeout: 5s
      retries: 20

  redis:
    image: redis:7.2.4-alpine3.19
    restart: always
    command: redis-server --appendonly yes --appendfsync always --dir /data
    volumes:
      - redis_data:/data
    ports:
      - 6380:6379

  redisinsight:
    image: redis/redisinsight:2.48.0
    ports:
      - 5540:5540
    volumes:
      - redisinsight_data:/db
    restart: always

  nginx:
    build: ./nginx
    restart: always
    env_file:
      - .env
    ports:
      - 80:80
      - 443:443
    volumes:
      - static_volume:/usr/src/app/static
      - media_volume:/usr/src/app/media
      - ./ssl:/usr/src/app/ssl:ro
    depends_on:
      web:
        condition: service_started

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
  redisinsight_data:
